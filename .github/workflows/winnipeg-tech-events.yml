name: Winnipeg Tech Events Scheduler

on:
  schedule:
    # Run every Monday at 9:00 AM CST (2:00 PM UTC)
    - cron: '0 14 * * 1'
    # TESTING: Run every 5 minutes (remove this line after testing)
    - cron: '*/5 * * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no actual posting)'
        required: false
        default: false
        type: boolean
      city:
        description: 'City to fetch events for'
        required: false
        default: 'Winnipeg'
        type: string
      categories:
        description: 'Event categories to fetch'
        required: false
        default: 'tech'
        type: string

env:
  GO_VERSION: '1.25'
  CITY: ${{ github.event.inputs.city || 'Winnipeg' }}
  CATEGORIES: ${{ github.event.inputs.categories || 'tech' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
  PERIOD_DAYS: '30'
  ENABLE_POLL: 'true'

jobs:
  fetch-and-post-events:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Build scheduler
      run: go build -o scheduler cmd/scheduler/main.go
      
    - name: Test connection (if not test mode)
      if: env.TEST_MODE != 'true'
      run: |
        echo "Testing Telegram connection..."
        ./scheduler || echo "Connection test failed, but continuing..."
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TEST_MODE: 'true'
        
    - name: Run event scheduler
      run: |
        echo "üöÄ Running Winnipeg Tech Events Scheduler..."
        echo "Configuration:"
        echo "  City: ${{ env.CITY }}"
        echo "  Categories: ${{ env.CATEGORIES }}"
        echo "  Period Days: ${{ env.PERIOD_DAYS }}"
        echo "  Test Mode: ${{ env.TEST_MODE }}"
        echo "  Enable Poll: ${{ env.ENABLE_POLL }}"
        echo ""
        
        ./scheduler
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_POLL_BOT_TOKEN: ${{ secrets.TELEGRAM_POLL_BOT_TOKEN }}
        TELEGRAM_POLL_CHAT_ID: ${{ secrets.TELEGRAM_POLL_CHAT_ID }}
        CITY: ${{ env.CITY }}
        CATEGORIES: ${{ env.CATEGORIES }}
        PERIOD_DAYS: ${{ env.PERIOD_DAYS }}
        TEST_MODE: ${{ env.TEST_MODE }}
        ENABLE_POLL: ${{ env.ENABLE_POLL }}
        
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scheduler-logs-${{ github.run_number }}
        path: |
          scheduler
        retention-days: 30
        
    - name: Send failure alert
      if: failure() && (github.event_name == 'schedule' || github.event.inputs.test_mode != 'true')
      run: |
        echo "‚ùå Scheduler failed, sending alert..."
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "üö® *Winnipeg Tech Events Alert*\n\nScheduler run failed!\n\n*Run ID:* '${{ github.run_id }}'\n*Workflow:* '${{ github.workflow }}'\n*Time:* '${{ github.event.head_commit.timestamp }}'\n\nCheck GitHub Actions logs for details.",
            "parse_mode": "Markdown"
          }' || echo "Failed to send alert"
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const testMode = '${{ github.event.inputs.test_mode }}';
          const result = testMode === 'true' ? '‚úÖ Test mode completed successfully' : '‚úÖ Events posted successfully';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ü§ñ **Winnipeg Tech Events Scheduler**\n\n${result}\n\n*Run ID:* \`${{ github.run_id }}\`\n*Time:* \`${{ github.event.head_commit.timestamp }}\``
          });
          
  notify-success:
    runs-on: ubuntu-latest
    needs: fetch-and-post-events
    if: success() && (github.event_name == 'schedule' || github.event.inputs.test_mode != 'true')
    
    steps:
    - name: Send success notification
      run: |
        echo "‚úÖ Scheduler completed successfully!"
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "‚úÖ *Winnipeg Tech Events Scheduler*\n\nSuccessfully completed scheduled run!\n\n*Run ID:* '${{ github.run_id }}'\n*Time:* '${{ github.event.head_commit.timestamp }}'",
            "parse_mode": "Markdown"
          }' || echo "Failed to send success notification"
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
